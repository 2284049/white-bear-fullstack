{"ast":null,"code":"var _jsxFileName = \"/Users/michellerohde/code/white-bear-fullstack/client/src/components/pages/CreateAnswer.js\";\nimport React from \"react\";\nimport AppTemplate from \"../ui/AppTemplate\";\nimport { Link } from \"react-router-dom\";\nimport classnames from \"classnames\";\nimport { checkIsOver, MAX_CARD_CHARS } from \"../../utils/helpers\";\nexport default class CreateAnswer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      answerText: \"\"\n    };\n  }\n\n  setAnswerText(e) {\n    this.setState({\n      answerText: e.target.value\n    }); // set the state of imageryText to be whatever the user inputs in that field (e.target.value)\n\n    console.log(e.target.value);\n  }\n\n  checkHasInvalidCharCount() {\n    if (this.state.answerText.length > MAX_CARD_CHARS || this.state.answerText.length === 0) {\n      return true;\n    } else return false;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(AppTemplate, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"text-center lead text-muted my-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }\n    }, \"Add an answer\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-body bg-secondary lead\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"textarea\", {\n      rows: \"6\",\n      id: \"create-answer-input\",\n      autoFocus: true,\n      defaultValue: \"\",\n      onChange: e => this.setAnswerText(e) // whatever the user changes to the card, it fires to update the state\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 19\n      }\n    }))), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"answer-characters\",\n      className: \"float-right mt-2 mb-5 text-muted\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      id: \"answer-char-count\",\n      className: classnames({\n        \"text-danger\": checkIsOver(this.state.answerText, MAX_CARD_CHARS)\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 16\n      }\n    }, this.state.answerText.length, \"/\", MAX_CARD_CHARS)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"clearfix\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"float-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/create-imagery\",\n      id: \"next\",\n      className: classnames(\"btn btn-outline-primary\", {\n        disabled: this.checkHasInvalidCharCount()\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 16\n      }\n    }, \"Next\")));\n  }\n\n}","map":{"version":3,"sources":["/Users/michellerohde/code/white-bear-fullstack/client/src/components/pages/CreateAnswer.js"],"names":["React","AppTemplate","Link","classnames","checkIsOver","MAX_CARD_CHARS","CreateAnswer","Component","constructor","props","state","answerText","setAnswerText","e","setState","target","value","console","log","checkHasInvalidCharCount","length","render","disabled"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,qBAA5C;AAEA,eAAe,MAAMC,YAAN,SAA2BN,KAAK,CAACO,SAAjC,CAA2C;AACvDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACVC,MAAAA,UAAU,EAAE;AADF,KAAb;AAGF;;AAEDC,EAAAA,aAAa,CAACC,CAAD,EAAI;AACd,SAAKC,QAAL,CAAc;AAAEH,MAAAA,UAAU,EAAEE,CAAC,CAACE,MAAF,CAASC;AAAvB,KAAd,EADc,CACiC;;AAC/CC,IAAAA,OAAO,CAACC,GAAR,CAAYL,CAAC,CAACE,MAAF,CAASC,KAArB;AACF;;AAEDG,EAAAA,wBAAwB,GAAG;AACxB,QACG,KAAKT,KAAL,CAAWC,UAAX,CAAsBS,MAAtB,GAA+Bf,cAA/B,IACA,KAAKK,KAAL,CAAWC,UAAX,CAAsBS,MAAtB,KAAiC,CAFpC,EAGE;AACC,aAAO,IAAP;AACF,KALD,MAKO,OAAO,KAAP;AACT;;AAEDC,EAAAA,MAAM,GAAG;AACN,wBACG,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACG;AAAG,MAAA,SAAS,EAAC,kCAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADH,eAGG;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACG;AAAK,MAAA,SAAS,EAAC,6BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBASG;AACG,MAAA,IAAI,EAAC,GADR;AAEG,MAAA,EAAE,EAAC,qBAFN;AAGG,MAAA,SAAS,EAAE,IAHd;AAIG,MAAA,YAAY,EAAC,EAJhB;AAKG,MAAA,QAAQ,EAAGR,CAAD,IAAO,KAAKD,aAAL,CAAmBC,CAAnB,CALpB,CAK2C;AAL3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATH,CADH,CAHH,eAuBG;AACG,MAAA,EAAE,EAAC,mBADN;AAEG,MAAA,SAAS,EAAC,kCAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAIG;AACG,MAAA,EAAE,EAAC,mBADN;AAEG,MAAA,SAAS,EAAEV,UAAU,CAAC;AACnB,uBAAeC,WAAW,CACvB,KAAKM,KAAL,CAAWC,UADY,EAEvBN,cAFuB;AADP,OAAD,CAFxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OASI,KAAKK,KAAL,CAAWC,UAAX,CAAsBS,MAT1B,OASmCf,cATnC,CAJH,CAvBH,eAwCG;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxCH,eA0CG;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACG,oBAAC,IAAD;AACG,MAAA,EAAE,EAAC,iBADN;AAEG,MAAA,EAAE,EAAC,MAFN;AAGG,MAAA,SAAS,EAAEF,UAAU,CAAC,yBAAD,EAA4B;AAC9CmB,QAAAA,QAAQ,EAAE,KAAKH,wBAAL;AADoC,OAA5B,CAHxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADH,CA1CH,CADH;AAwDF;;AA/EsD","sourcesContent":["import React from \"react\";\nimport AppTemplate from \"../ui/AppTemplate\";\nimport { Link } from \"react-router-dom\";\nimport classnames from \"classnames\";\nimport { checkIsOver, MAX_CARD_CHARS } from \"../../utils/helpers\";\n\nexport default class CreateAnswer extends React.Component {\n   constructor(props) {\n      super(props);\n      this.state = {\n         answerText: \"\",\n      };\n   }\n\n   setAnswerText(e) {\n      this.setState({ answerText: e.target.value }); // set the state of imageryText to be whatever the user inputs in that field (e.target.value)\n      console.log(e.target.value);\n   }\n\n   checkHasInvalidCharCount() {\n      if (\n         this.state.answerText.length > MAX_CARD_CHARS ||\n         this.state.answerText.length === 0\n      ) {\n         return true;\n      } else return false;\n   }\n\n   render() {\n      return (\n         <AppTemplate>\n            <p className=\"text-center lead text-muted my-2\">Add an answer</p>\n\n            <div className=\"card\">\n               <div className=\"card-body bg-secondary lead\">\n                  {/* <!-- We put in two different text areas \n                            for the mockup depending on screen size, \n                            so that 300 characters would show without \n                            having scroll bars. d-md-none and d-md-block-->\n                     <!-- Autofocus is an attribute so the cursor is\n                        automatically blinking when the page loads. -->\n                     <!-- Commenting the first textarea out, to focus on character counts */}\n\n                  <textarea\n                     rows=\"6\"\n                     id=\"create-answer-input\"\n                     autoFocus={true}\n                     defaultValue=\"\"\n                     onChange={(e) => this.setAnswerText(e)} // whatever the user changes to the card, it fires to update the state\n                  ></textarea>\n               </div>\n            </div>\n\n            <p\n               id=\"answer-characters\"\n               className=\"float-right mt-2 mb-5 text-muted\"\n            >\n               <span\n                  id=\"answer-char-count\"\n                  className={classnames({\n                     \"text-danger\": checkIsOver(\n                        this.state.answerText,\n                        MAX_CARD_CHARS\n                     ),\n                  })}\n               >\n                  {this.state.answerText.length}/{MAX_CARD_CHARS}\n               </span>\n            </p>\n\n            <div className=\"clearfix\"></div>\n\n            <div className=\"float-right\">\n               <Link\n                  to=\"/create-imagery\"\n                  id=\"next\"\n                  className={classnames(\"btn btn-outline-primary\", {\n                     disabled: this.checkHasInvalidCharCount(),\n                  })}\n               >\n                  Next\n               </Link>\n            </div>\n         </AppTemplate>\n      );\n   }\n}\n"]},"metadata":{},"sourceType":"module"}