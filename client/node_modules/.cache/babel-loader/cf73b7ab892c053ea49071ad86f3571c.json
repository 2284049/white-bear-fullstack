{"ast":null,"code":"import _classCallCheck from\"/Users/michellerohde/code/white-bear-fullstack/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/michellerohde/code/white-bear-fullstack/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/michellerohde/code/white-bear-fullstack/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/michellerohde/code/white-bear-fullstack/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from\"react\";import AppTemplate from\"../ui/AppTemplate\";import{Link}from\"react-router-dom\";import classnames from\"classnames\";import{checkIsOver,MAX_CARD_CHARS}from\"../../utils/helpers\";var CreateAnswer=/*#__PURE__*/function(_React$Component){_inherits(CreateAnswer,_React$Component);var _super=_createSuper(CreateAnswer);function CreateAnswer(props){var _this;_classCallCheck(this,CreateAnswer);_this=_super.call(this,props);_this.state={answerText:\"\"};return _this;}_createClass(CreateAnswer,[{key:\"setAnswerText\",value:function setAnswerText(e){this.setState({answerText:e.target.value});// set the state of imageryText to be whatever the user inputs in that field (e.target.value)\nconsole.log(e.target.value);}},{key:\"checkHasInvalidCharCount\",value:function checkHasInvalidCharCount(){if(this.state.answerText.length>MAX_CARD_CHARS||this.state.answerText.length===0){return true;}else return false;}},{key:\"render\",value:function render(){var _this2=this;return/*#__PURE__*/React.createElement(AppTemplate,null,/*#__PURE__*/React.createElement(\"p\",{className:\"text-center lead text-muted my-2\"},\"Add an answer\"),/*#__PURE__*/React.createElement(\"div\",{className:\"card\"},/*#__PURE__*/React.createElement(\"div\",{className:\"card-body bg-secondary lead\"},/*#__PURE__*/React.createElement(\"textarea\",{rows:\"6\",id:\"create-answer-input\",autoFocus:true,defaultValue:\"\",onChange:function onChange(e){return _this2.setAnswerText(e);}// whatever the user changes to the card, it fires to update the state\n}))),/*#__PURE__*/React.createElement(\"p\",{id:\"answer-characters\",className:\"float-right mt-2 mb-5 text-muted\"},/*#__PURE__*/React.createElement(\"span\",{id:\"answer-char-count\",className:classnames({\"text-danger\":checkIsOver(this.state.answerText,MAX_CARD_CHARS)})},this.state.answerText.length,\"/\",MAX_CARD_CHARS)),/*#__PURE__*/React.createElement(\"div\",{className:\"clearfix\"}),/*#__PURE__*/React.createElement(\"div\",{className:\"float-right\"},/*#__PURE__*/React.createElement(Link,{to:\"/create-imagery\",id:\"next\",className:classnames(\"btn btn-outline-primary\",{disabled:this.checkHasInvalidCharCount()})},\"Next\")));}}]);return CreateAnswer;}(React.Component);export{CreateAnswer as default};","map":{"version":3,"sources":["/Users/michellerohde/code/white-bear-fullstack/client/src/components/pages/CreateAnswer.js"],"names":["React","AppTemplate","Link","classnames","checkIsOver","MAX_CARD_CHARS","CreateAnswer","props","state","answerText","e","setState","target","value","console","log","length","setAnswerText","disabled","checkHasInvalidCharCount","Component"],"mappings":"gqBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,WAAP,KAAwB,mBAAxB,CACA,OAASC,IAAT,KAAqB,kBAArB,CACA,MAAOC,CAAAA,UAAP,KAAuB,YAAvB,CACA,OAASC,WAAT,CAAsBC,cAAtB,KAA4C,qBAA5C,C,GAEqBC,CAAAA,Y,wHAClB,sBAAYC,KAAZ,CAAmB,8CAChB,uBAAMA,KAAN,EACA,MAAKC,KAAL,CAAa,CACVC,UAAU,CAAE,EADF,CAAb,CAFgB,aAKlB,C,6EAEaC,C,CAAG,CACd,KAAKC,QAAL,CAAc,CAAEF,UAAU,CAAEC,CAAC,CAACE,MAAF,CAASC,KAAvB,CAAd,EAA+C;AAC/CC,OAAO,CAACC,GAAR,CAAYL,CAAC,CAACE,MAAF,CAASC,KAArB,EACF,C,2EAE0B,CACxB,GACG,KAAKL,KAAL,CAAWC,UAAX,CAAsBO,MAAtB,CAA+BX,cAA/B,EACA,KAAKG,KAAL,CAAWC,UAAX,CAAsBO,MAAtB,GAAiC,CAFpC,CAGE,CACC,MAAO,KAAP,CACF,CALD,IAKO,OAAO,MAAP,CACT,C,uCAEQ,iBACN,mBACG,oBAAC,WAAD,mBACG,yBAAG,SAAS,CAAC,kCAAb,kBADH,cAGG,2BAAK,SAAS,CAAC,MAAf,eACG,2BAAK,SAAS,CAAC,6BAAf,eASG,gCACG,IAAI,CAAC,GADR,CAEG,EAAE,CAAC,qBAFN,CAGG,SAAS,CAAE,IAHd,CAIG,YAAY,CAAC,EAJhB,CAKG,QAAQ,CAAE,kBAACN,CAAD,QAAO,CAAA,MAAI,CAACO,aAAL,CAAmBP,CAAnB,CAAP,EAA8B;AAL3C,EATH,CADH,CAHH,cAuBG,yBACG,EAAE,CAAC,mBADN,CAEG,SAAS,CAAC,kCAFb,eAIG,4BACG,EAAE,CAAC,mBADN,CAEG,SAAS,CAAEP,UAAU,CAAC,CACnB,cAAeC,WAAW,CACvB,KAAKI,KAAL,CAAWC,UADY,CAEvBJ,cAFuB,CADP,CAAD,CAFxB,EASI,KAAKG,KAAL,CAAWC,UAAX,CAAsBO,MAT1B,KASmCX,cATnC,CAJH,CAvBH,cAwCG,2BAAK,SAAS,CAAC,UAAf,EAxCH,cA0CG,2BAAK,SAAS,CAAC,aAAf,eACG,oBAAC,IAAD,EACG,EAAE,CAAC,iBADN,CAEG,EAAE,CAAC,MAFN,CAGG,SAAS,CAAEF,UAAU,CAAC,yBAAD,CAA4B,CAC9Ce,QAAQ,CAAE,KAAKC,wBAAL,EADoC,CAA5B,CAHxB,SADH,CA1CH,CADH,CAwDF,C,0BA/EsCnB,KAAK,CAACoB,S,SAA3Bd,Y","sourcesContent":["import React from \"react\";\nimport AppTemplate from \"../ui/AppTemplate\";\nimport { Link } from \"react-router-dom\";\nimport classnames from \"classnames\";\nimport { checkIsOver, MAX_CARD_CHARS } from \"../../utils/helpers\";\n\nexport default class CreateAnswer extends React.Component {\n   constructor(props) {\n      super(props);\n      this.state = {\n         answerText: \"\",\n      };\n   }\n\n   setAnswerText(e) {\n      this.setState({ answerText: e.target.value }); // set the state of imageryText to be whatever the user inputs in that field (e.target.value)\n      console.log(e.target.value);\n   }\n\n   checkHasInvalidCharCount() {\n      if (\n         this.state.answerText.length > MAX_CARD_CHARS ||\n         this.state.answerText.length === 0\n      ) {\n         return true;\n      } else return false;\n   }\n\n   render() {\n      return (\n         <AppTemplate>\n            <p className=\"text-center lead text-muted my-2\">Add an answer</p>\n\n            <div className=\"card\">\n               <div className=\"card-body bg-secondary lead\">\n                  {/* <!-- We put in two different text areas \n                            for the mockup depending on screen size, \n                            so that 300 characters would show without \n                            having scroll bars. d-md-none and d-md-block-->\n                     <!-- Autofocus is an attribute so the cursor is\n                        automatically blinking when the page loads. -->\n                     <!-- Commenting the first textarea out, to focus on character counts */}\n\n                  <textarea\n                     rows=\"6\"\n                     id=\"create-answer-input\"\n                     autoFocus={true}\n                     defaultValue=\"\"\n                     onChange={(e) => this.setAnswerText(e)} // whatever the user changes to the card, it fires to update the state\n                  ></textarea>\n               </div>\n            </div>\n\n            <p\n               id=\"answer-characters\"\n               className=\"float-right mt-2 mb-5 text-muted\"\n            >\n               <span\n                  id=\"answer-char-count\"\n                  className={classnames({\n                     \"text-danger\": checkIsOver(\n                        this.state.answerText,\n                        MAX_CARD_CHARS\n                     ),\n                  })}\n               >\n                  {this.state.answerText.length}/{MAX_CARD_CHARS}\n               </span>\n            </p>\n\n            <div className=\"clearfix\"></div>\n\n            <div className=\"float-right\">\n               <Link\n                  to=\"/create-imagery\"\n                  id=\"next\"\n                  className={classnames(\"btn btn-outline-primary\", {\n                     disabled: this.checkHasInvalidCharCount(),\n                  })}\n               >\n                  Next\n               </Link>\n            </div>\n         </AppTemplate>\n      );\n   }\n}\n"]},"metadata":{},"sourceType":"module"}