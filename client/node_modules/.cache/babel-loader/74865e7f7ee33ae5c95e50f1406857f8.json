{"ast":null,"code":"var _jsxFileName = \"/Users/michellerohde/code/white-bear-fullstack/client/src/components/ui/LogIn.js\";\nimport React from \"react\";\nimport classnames from \"classnames\";\nimport hash from \"object-hash\";\nimport { v4 as getUuid } from \"uuid\";\nimport { withRouter } from \"react-router-dom\";\nimport { EMAIL_REGEX } from \"../../utils/helpers\";\nimport axios from \"axios\";\nimport actions from \"../../store/actions\";\nimport { connect } from \"react-redux\";\n\nclass LogIn extends React.Component {\n  // this function turned into a class will have a bunch of functions in it\n  constructor(props) {\n    super(props);\n    this.state = {\n      emailError: \"\",\n      passwordError: \"\",\n      hasEmailError: false,\n      hasPasswordError: false\n    };\n  }\n\n  async setEmailState(emailInput) {\n    const lowerCasedEmail = emailInput.toLowerCase(); // make their input lowercase\n\n    if (emailInput === \"\") // if the email input is blank,\n      this.setState({\n        emailError: \"Please enter your email address.\",\n        // display this error\n        hasEmailError: true // make the input box red with is-invalid class\n\n      });else if (!EMAIL_REGEX.test(lowerCasedEmail)) {\n      // if email does not follow regex format,\n      this.setState({\n        emailError: \"Please enter a valid email address.\",\n        //display this error\n        hasEmailError: true // make the input box red with is-invalid class\n\n      });\n    } else {\n      // otherwise, we don't want an email error (empty string) and we want to set hasEmailError to false to remove is-invalid class\n      this.setState({\n        emailError: \"\",\n        hasEmailError: false\n      });\n    }\n  }\n\n  async setPasswordState(passwordInput) {\n    if (passwordInput === \"\") {\n      this.setState({\n        passwordError: \"Please enter your password.\",\n        // display this error\n        hasPasswordError: true // make the input box red with is-invalid class\n\n      });\n    } else {\n      this.setState({\n        passwordError: \"\",\n        hasPasswordError: false\n      });\n    }\n  }\n\n  async validateAndLogInUser() {\n    const emailInput = document.getElementById(\"login-email-input\").value; // get the user email input\n\n    await this.setEmailState(emailInput);\n    const passwordInput = document.getElementById(\"login-password-input\").value;\n    await this.setPasswordState(passwordInput, emailInput);\n\n    if (this.state.hasEmailError === false && this.state.hasPasswordError === false) {\n      const user = {\n        id: getUuid(),\n        email: emailInput,\n        password: hash(passwordInput),\n        loggedInAt: Date.now()\n      };\n      console.log(\"Created user object for POST: \", user); // mimics API response\n\n      axios // WE WANT THE API CALL TO HAPPEN AFTER THEY'VE BEEN VALIDATED\n      .get(\"https://raw.githubusercontent.com/2284049/white-bear-mpa/main/src/mock-data/user.json\").then(res => {\n        // handle success\n        const currentUser = res.data;\n        console.log(currentUser);\n        this.props.dispatch({\n          // HAD TO HAVE \"THIS\" FOR PROPS ERROR TO GO AWAY\n          type: actions.UPDATE_CURRENT_USER,\n          payload: res.data\n        });\n      }).catch(error => {// handle error\n      }); // TO TAKE THE VALIDATED USER TO NEXT PAGE\n      // First, put up top: import { withRouter } from \"react-router-dom\";\n      // take out the export defult at top and put on bottom of page like this: export default withRouter(LogIn);\n      // use this code to tell it which page to go to:\n\n      this.props.history.push(\"/create-answer\");\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 col-lg-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card mt-8 mt-lg-0 ml-lg-8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-body text-dark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 22\n      }\n    }, \"Welcome back\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"font-sans-serif mt-3 mb-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 22\n      }\n    }, \"Log in with your email address and password.\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 22\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"login-email-input\",\n      className: \"text-muted lead font-sans-serif\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 25\n      }\n    }, \"Email address\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"email\",\n      className: classnames({\n        \"form-control\": true,\n        \"is-invalid\": this.state.emailError // is-invalid class will display when emailError state equals true\n\n      }),\n      id: \"login-email-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 25\n      }\n    }), this.state.hasEmailError &&\n    /*#__PURE__*/\n    // when the hasEmailError state is true\n    // which means there is an error, display this:\n    React.createElement(\"p\", {\n      className: \"text-danger\",\n      id: \"login-email-error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 28\n      }\n    }, this.state.emailError)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 22\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"login-password-input\",\n      className: \"text-muted lead font-sans-serif\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 25\n      }\n    }, \"Password\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"email\",\n      className: classnames({\n        \"form-control\": true,\n        \"is-invalid\": this.state.passwordError // is-invalid class will display when emailError state equals true\n\n      }),\n      id: \"login-password-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 25\n      }\n    }), this.state.hasPasswordError && /*#__PURE__*/React.createElement(\"p\", {\n      className: \"text-danger\",\n      id: \"login-password-error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 28\n      }\n    }, this.state.passwordError)), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"password\",\n      className: \"float-right btn btn-success btn-lg font-sans-serif\",\n      onClick: () => {\n        this.validateAndLogInUser();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 22\n      }\n    }, \"Log in\")))));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  //global state\n  return {};\n}\n\nexport default withRouter(connect(mapStateToProps)(LogIn));","map":{"version":3,"sources":["/Users/michellerohde/code/white-bear-fullstack/client/src/components/ui/LogIn.js"],"names":["React","classnames","hash","v4","getUuid","withRouter","EMAIL_REGEX","axios","actions","connect","LogIn","Component","constructor","props","state","emailError","passwordError","hasEmailError","hasPasswordError","setEmailState","emailInput","lowerCasedEmail","toLowerCase","setState","test","setPasswordState","passwordInput","validateAndLogInUser","document","getElementById","value","user","id","email","password","loggedInAt","Date","now","console","log","get","then","res","currentUser","data","dispatch","type","UPDATE_CURRENT_USER","payload","catch","error","history","push","render","mapStateToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport classnames from \"classnames\";\nimport hash from \"object-hash\";\nimport { v4 as getUuid } from \"uuid\";\nimport { withRouter } from \"react-router-dom\";\nimport { EMAIL_REGEX } from \"../../utils/helpers\";\nimport axios from \"axios\";\nimport actions from \"../../store/actions\";\nimport { connect } from \"react-redux\";\n\nclass LogIn extends React.Component {\n   // this function turned into a class will have a bunch of functions in it\n   constructor(props) {\n      super(props);\n      this.state = {\n         emailError: \"\",\n         passwordError: \"\",\n         hasEmailError: false,\n         hasPasswordError: false,\n      };\n   }\n\n   async setEmailState(emailInput) {\n      const lowerCasedEmail = emailInput.toLowerCase(); // make their input lowercase\n      if (emailInput === \"\")\n         // if the email input is blank,\n         this.setState({\n            emailError: \"Please enter your email address.\", // display this error\n            hasEmailError: true, // make the input box red with is-invalid class\n         });\n      else if (!EMAIL_REGEX.test(lowerCasedEmail)) {\n         // if email does not follow regex format,\n         this.setState({\n            emailError: \"Please enter a valid email address.\", //display this error\n            hasEmailError: true, // make the input box red with is-invalid class\n         });\n      } else {\n         // otherwise, we don't want an email error (empty string) and we want to set hasEmailError to false to remove is-invalid class\n         this.setState({ emailError: \"\", hasEmailError: false });\n      }\n   }\n\n   async setPasswordState(passwordInput) {\n      if (passwordInput === \"\") {\n         this.setState({\n            passwordError: \"Please enter your password.\", // display this error\n            hasPasswordError: true, // make the input box red with is-invalid class\n         });\n      } else {\n         this.setState({ passwordError: \"\", hasPasswordError: false });\n      }\n   }\n\n   async validateAndLogInUser() {\n      const emailInput = document.getElementById(\"login-email-input\").value; // get the user email input\n      await this.setEmailState(emailInput);\n      const passwordInput = document.getElementById(\"login-password-input\")\n         .value;\n      await this.setPasswordState(passwordInput, emailInput);\n      if (\n         this.state.hasEmailError === false &&\n         this.state.hasPasswordError === false\n      ) {\n         const user = {\n            id: getUuid(),\n            email: emailInput,\n            password: hash(passwordInput),\n            loggedInAt: Date.now(),\n         };\n         console.log(\"Created user object for POST: \", user); // mimics API response\n         axios // WE WANT THE API CALL TO HAPPEN AFTER THEY'VE BEEN VALIDATED\n            .get(\n               \"https://raw.githubusercontent.com/2284049/white-bear-mpa/main/src/mock-data/user.json\"\n            )\n            .then((res) => {\n               // handle success\n               const currentUser = res.data;\n               console.log(currentUser);\n               this.props.dispatch({\n                  // HAD TO HAVE \"THIS\" FOR PROPS ERROR TO GO AWAY\n                  type: actions.UPDATE_CURRENT_USER,\n                  payload: res.data,\n               });\n            })\n            .catch((error) => {\n               // handle error\n            });\n         // TO TAKE THE VALIDATED USER TO NEXT PAGE\n         // First, put up top: import { withRouter } from \"react-router-dom\";\n         // take out the export defult at top and put on bottom of page like this: export default withRouter(LogIn);\n         // use this code to tell it which page to go to:\n         this.props.history.push(\"/create-answer\");\n      }\n   }\n\n   render() {\n      return (\n         <>\n            <div className=\"col-12 col-lg-5\">\n               <div className=\"card mt-8 mt-lg-0 ml-lg-8\">\n                  <div className=\"card-body text-dark\">\n                     <h2>Welcome back</h2>\n                     <p className=\"font-sans-serif mt-3 mb-5\">\n                        Log in with your email address and password.\n                     </p>\n                     <div className=\"form-group\">\n                        <label\n                           htmlFor=\"login-email-input\"\n                           className=\"text-muted lead font-sans-serif\"\n                        >\n                           Email address\n                        </label>\n                        <input\n                           type=\"email\"\n                           className={classnames({\n                              \"form-control\": true,\n                              \"is-invalid\": this.state.emailError, // is-invalid class will display when emailError state equals true\n                           })}\n                           id=\"login-email-input\"\n                        />\n                        {this.state.hasEmailError && (\n                           // when the hasEmailError state is true\n                           // which means there is an error, display this:\n                           <p className=\"text-danger\" id=\"login-email-error\">\n                              {this.state.emailError}\n                           </p>\n                        )}\n                     </div>\n                     <div className=\"form-group\">\n                        <label\n                           htmlFor=\"login-password-input\"\n                           className=\"text-muted lead font-sans-serif\"\n                        >\n                           Password\n                        </label>\n                        <input\n                           type=\"email\"\n                           className={classnames({\n                              \"form-control\": true,\n                              \"is-invalid\": this.state.passwordError, // is-invalid class will display when emailError state equals true\n                           })}\n                           id=\"login-password-input\"\n                        />\n                        {this.state.hasPasswordError && (\n                           <p className=\"text-danger\" id=\"login-password-error\">\n                              {this.state.passwordError}\n                           </p>\n                        )}\n                     </div>\n                     <button\n                        type=\"password\"\n                        className=\"float-right btn btn-success btn-lg font-sans-serif\"\n                        onClick={() => {\n                           this.validateAndLogInUser();\n                        }}\n                     >\n                        Log in\n                     </button>\n                  </div>\n               </div>\n            </div>\n         </>\n      );\n   }\n}\n\nfunction mapStateToProps(state) {\n   //global state\n   return {};\n}\nexport default withRouter(connect(mapStateToProps)(LogIn));\n"]},"metadata":{},"sourceType":"module"}