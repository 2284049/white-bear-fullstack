{"ast":null,"code":"import _toConsumableArray from\"/Users/michellerohde/code/white-bear-fullstack/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _regeneratorRuntime from\"/Users/michellerohde/code/white-bear-fullstack/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/michellerohde/code/white-bear-fullstack/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/michellerohde/code/white-bear-fullstack/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/michellerohde/code/white-bear-fullstack/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/michellerohde/code/white-bear-fullstack/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/michellerohde/code/white-bear-fullstack/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from\"react\";// import { Link } from \"react-router-dom\";\nimport classnames from\"classnames\";import hash from\"object-hash\";import{v4 as getUuid}from\"uuid\";import{withRouter}from\"react-router-dom\";import{EMAIL_REGEX}from\"../../utils/helpers\";import axios from\"axios\";import actions from\"../../store/actions\";import{connect}from\"react-redux\";var SignUp=/*#__PURE__*/function(_React$Component){_inherits(SignUp,_React$Component);var _super=_createSuper(SignUp);// this function turned into a class will have a bunch of functions in it\nfunction SignUp(props){var _this;_classCallCheck(this,SignUp);_this=_super.call(this,props);_this.state={isDisplayingInputs:false,emailError:\"\",passwordError:\"\",hasEmailError:false,hasPasswordError:false};return _this;}_createClass(SignUp,[{key:\"displayInputs\",value:function displayInputs(){this.setState({isDisplayingInputs:true});}},{key:\"setEmailState\",value:function(){var _setEmailState=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(emailInput){var lowerCasedEmail;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:lowerCasedEmail=emailInput.toLowerCase();// make their input lowercase\nif(emailInput===\"\"){// if the email input is blank,\nthis.setState({emailError:\"Please enter your email address.\",// display this error\nhasEmailError:true// make the input box red with is-invalid class\n});}else if(!EMAIL_REGEX.test(lowerCasedEmail)){// if email does not follow regex format,\nthis.setState({emailError:\"Please enter a valid email address.\",//display this error\nhasEmailError:true// make the input box red with is-invalid class\n});}else{// otherwise, we don't want an email error (empty string) and we want to set hasEmailError to false to remove is-invalid class\nthis.setState({emailError:\"\",hasEmailError:false});}case 2:case\"end\":return _context.stop();}}},_callee,this);}));function setEmailState(_x){return _setEmailState.apply(this,arguments);}return setEmailState;}()},{key:\"checkHasLocalPart\",value:function checkHasLocalPart(passwordInput,emailInput){var localPart=emailInput.split(\"@\")[0];// the split will give us an array of strings [\"local part\", \"part after @\"]; we want the part at index 0\nif(localPart===\"\")return false;else if(localPart.length<4)return false;else return passwordInput.includes(localPart);// if this is true, it returns true; if it's false, it returns false\n}},{key:\"setPasswordState\",value:function(){var _setPasswordState=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(passwordInput,emailInput){var uniqChars;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:uniqChars=_toConsumableArray(new Set(passwordInput));// puts all unique characters into an array\nif(passwordInput===\"\"){this.setState({passwordError:\"Please create a password.\",// display this error\nhasPasswordError:true// make the input box red with is-invalid class\n});}else if(passwordInput.length<9){this.setState({passwordError:\"Your password must be at least 9 characters.\",// display this error\nhasPasswordError:true// make the input box red with is-invalid class\n});}else if(this.checkHasLocalPart(passwordInput,emailInput)){this.setState({passwordError:\"Your password cannot contain your email address.\",// display this error\nhasPasswordError:true// make the input box red with is-invalid class\n});}else if(uniqChars.length<3){this.setState({passwordError:\"Your password must contain at least 3 unique characters.\",// display this error\nhasPasswordError:true// make the input box red with is-invalid class\n});}else{this.setState({passwordError:\"\",hasPasswordError:false});}case 2:case\"end\":return _context2.stop();}}},_callee2,this);}));function setPasswordState(_x2,_x3){return _setPasswordState.apply(this,arguments);}return setPasswordState;}()},{key:\"validateAndCreateUser\",value:function(){var _validateAndCreateUser=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var _this2=this;var emailInput,passwordInput,user;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:emailInput=document.getElementById(\"signup-email-input\").value;// get the user email input\n_context3.next=3;return this.setEmailState(emailInput);case 3:passwordInput=document.getElementById(\"signup-password-input\").value;_context3.next=6;return this.setPasswordState(passwordInput,emailInput);case 6:if(this.state.hasEmailError===false&&this.state.hasPasswordError===false){user={id:getUuid(),email:emailInput,password:hash(passwordInput),createdAt:Date.now()};console.log(user);console.log(\"Created user object for POST: \",user);// mimics API response\naxios// WE WANT THE API CALL TO HAPPEN AFTER THEY'VE BEEN VALIDATED\n.get(\"https://raw.githubusercontent.com/2284049/white-bear-mpa/main/src/mock-data/user.json\").then(function(res){// handle success\nvar currentUser=res.data;console.log(currentUser);_this2.props.dispatch({// HAD TO HAVE \"THIS\" FOR PROPS ERROR TO GO AWAY\ntype:actions.UPDATE_CURRENT_USER,payload:res.data});}).catch(function(error){// handle error\n});this.props.history.push(\"/create-answer\");}case 7:case\"end\":return _context3.stop();}}},_callee3,this);}));function validateAndCreateUser(){return _validateAndCreateUser.apply(this,arguments);}return validateAndCreateUser;}()},{key:\"render\",value:function render(){var _this3=this;// put the body of your function here\nreturn/*#__PURE__*/React.createElement(\"div\",{className:\"col-12 col-lg-5\"},/*#__PURE__*/React.createElement(\"div\",{className:\"card\"},/*#__PURE__*/React.createElement(\"div\",{className:\"card-body text-dark\"},/*#__PURE__*/React.createElement(\"h2\",null,\"Nice to meet you\"),/*#__PURE__*/React.createElement(\"p\",{className:\"font-sans-serif mt-3\"},\"Sign up for White Bear. Free Forever.\"),this.state.isDisplayingInputs&&/*#__PURE__*/ // we are saying we want the stuff below to display\n// when this state is true\n// it's initially set to false\nReact.createElement(\"div\",{id:\"create-account-card\",className:\"\"},/*#__PURE__*/React.createElement(\"p\",{className:\"text-blue font-sans-serif mt-2 mb-5\"},\"Let's get you signed up.\"),/*#__PURE__*/React.createElement(\"div\",{className:\"form-group\"},/*#__PURE__*/React.createElement(\"label\",{htmlFor:\"signup-email-input\",className:\"text-muted lead font-sans-serif\"},\"Email address\"),/*#__PURE__*/React.createElement(\"input\",{type:\"email\",className:classnames({\"form-control\":true,\"is-invalid\":this.state.hasEmailError// is-invalid class will display when emailError state equals true\n}),id:\"signup-email-input\"}),this.state.hasEmailError&&/*#__PURE__*/ // when the hasEmailError state is true\n// which means there is an error, display this:\nReact.createElement(\"p\",{className:\"text-danger\",id:\"email-error\"},this.state.emailError)),/*#__PURE__*/React.createElement(\"div\",{className:\"form-group\"},/*#__PURE__*/React.createElement(\"label\",{htmlFor:\"signup-password-input\",className:\"text-muted lead font-sans-serif\"},\"Create a password\"),/*#__PURE__*/React.createElement(\"p\",{className:\"text-muted mt-n2\"},\"Must be at least 9 characters.\"),/*#__PURE__*/React.createElement(\"input\",{type:\"password\",className:classnames({\"form-control\":true,\"is-invalid\":this.state.hasPasswordError// is-invalid class will display when emailError state equals true\n}),id:\"signup-password-input\"}),this.state.hasPasswordError&&/*#__PURE__*/React.createElement(\"p\",{className:\"text-danger\",id:\"password-error\"},this.state.passwordError)),/*#__PURE__*/React.createElement(\"button\",{to:\"/create-answer\",className:\"float-right btn btn-success btn-lg font-sans-serif\",style:{width:\"100%\"},id:\"lets-go\",onClick:function onClick(){_this3.validateAndCreateUser();}},\"Let's go!\")),!this.state.isDisplayingInputs&&/*#__PURE__*/ // now we are telling it what to do when\n// the state of this object is set to false\n// by putting an exclamation point in front of it\n// we want the sign up button to show when the state is false\nReact.createElement(\"button\",{className:\"btn btn-success btn-lg font-sans-serif mt-5\",style:{width:\"100%\"},id:\"sign-up-button\",onClick:function onClick(){_this3.displayInputs();// when the button is clicked\n// and the state of isDislayingSignUpInputs changes to false\n// the sign up button disappears and the sign up card displays\n}},\"Sign up\"))));}}]);return SignUp;}(React.Component);function mapStateToProps(state){//global state\nreturn{};}export default withRouter(connect(mapStateToProps)(SignUp));","map":{"version":3,"sources":["/Users/michellerohde/code/white-bear-fullstack/client/src/components/ui/SignUp.js"],"names":["React","classnames","hash","v4","getUuid","withRouter","EMAIL_REGEX","axios","actions","connect","SignUp","props","state","isDisplayingInputs","emailError","passwordError","hasEmailError","hasPasswordError","setState","emailInput","lowerCasedEmail","toLowerCase","test","passwordInput","localPart","split","length","includes","uniqChars","Set","checkHasLocalPart","document","getElementById","value","setEmailState","setPasswordState","user","id","email","password","createdAt","Date","now","console","log","get","then","res","currentUser","data","dispatch","type","UPDATE_CURRENT_USER","payload","catch","error","history","push","width","validateAndCreateUser","displayInputs","Component","mapStateToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\n// import { Link } from \"react-router-dom\";\nimport classnames from \"classnames\";\nimport hash from \"object-hash\";\nimport { v4 as getUuid } from \"uuid\";\nimport { withRouter } from \"react-router-dom\";\nimport { EMAIL_REGEX } from \"../../utils/helpers\";\nimport axios from \"axios\";\nimport actions from \"../../store/actions\";\nimport { connect } from \"react-redux\";\n\nclass SignUp extends React.Component {\n   // this function turned into a class will have a bunch of functions in it\n   constructor(props) {\n      super(props);\n      this.state = {\n         isDisplayingInputs: false,\n         emailError: \"\",\n         passwordError: \"\",\n         hasEmailError: false,\n         hasPasswordError: false,\n      };\n   }\n\n   displayInputs() {\n      this.setState({\n         isDisplayingInputs: true,\n      });\n   }\n\n   async setEmailState(emailInput) {\n      const lowerCasedEmail = emailInput.toLowerCase(); // make their input lowercase\n      if (emailInput === \"\") {\n         // if the email input is blank,\n         this.setState({\n            emailError: \"Please enter your email address.\", // display this error\n            hasEmailError: true, // make the input box red with is-invalid class\n         });\n      } else if (!EMAIL_REGEX.test(lowerCasedEmail)) {\n         // if email does not follow regex format,\n         this.setState({\n            emailError: \"Please enter a valid email address.\", //display this error\n            hasEmailError: true, // make the input box red with is-invalid class\n         });\n      } else {\n         // otherwise, we don't want an email error (empty string) and we want to set hasEmailError to false to remove is-invalid class\n         this.setState({ emailError: \"\", hasEmailError: false });\n      }\n   }\n\n   checkHasLocalPart(passwordInput, emailInput) {\n      const localPart = emailInput.split(\"@\")[0]; // the split will give us an array of strings [\"local part\", \"part after @\"]; we want the part at index 0\n      if (localPart === \"\") return false;\n      else if (localPart.length < 4) return false;\n      else return passwordInput.includes(localPart); // if this is true, it returns true; if it's false, it returns false\n   }\n\n   async setPasswordState(passwordInput, emailInput) {\n      const uniqChars = [...new Set(passwordInput)]; // puts all unique characters into an array\n      if (passwordInput === \"\") {\n         this.setState({\n            passwordError: \"Please create a password.\", // display this error\n            hasPasswordError: true, // make the input box red with is-invalid class\n         });\n      } else if (passwordInput.length < 9) {\n         this.setState({\n            passwordError: \"Your password must be at least 9 characters.\", // display this error\n            hasPasswordError: true, // make the input box red with is-invalid class\n         });\n      } else if (this.checkHasLocalPart(passwordInput, emailInput)) {\n         this.setState({\n            passwordError: \"Your password cannot contain your email address.\", // display this error\n            hasPasswordError: true, // make the input box red with is-invalid class\n         });\n      } else if (uniqChars.length < 3) {\n         this.setState({\n            passwordError:\n               \"Your password must contain at least 3 unique characters.\", // display this error\n            hasPasswordError: true, // make the input box red with is-invalid class\n         });\n      } else {\n         this.setState({ passwordError: \"\", hasPasswordError: false });\n      }\n   }\n\n   async validateAndCreateUser() {\n      const emailInput = document.getElementById(\"signup-email-input\").value; // get the user email input\n      await this.setEmailState(emailInput);\n      const passwordInput = document.getElementById(\"signup-password-input\")\n         .value;\n      await this.setPasswordState(passwordInput, emailInput);\n      if (\n         this.state.hasEmailError === false &&\n         this.state.hasPasswordError === false\n      ) {\n         const user = {\n            id: getUuid(),\n            email: emailInput,\n            password: hash(passwordInput),\n            createdAt: Date.now(),\n         };\n         console.log(user);\n         console.log(\"Created user object for POST: \", user); // mimics API response\n         axios // WE WANT THE API CALL TO HAPPEN AFTER THEY'VE BEEN VALIDATED\n            .get(\n               \"https://raw.githubusercontent.com/2284049/white-bear-mpa/main/src/mock-data/user.json\"\n            )\n            .then((res) => {\n               // handle success\n               const currentUser = res.data;\n               console.log(currentUser);\n               this.props.dispatch({\n                  // HAD TO HAVE \"THIS\" FOR PROPS ERROR TO GO AWAY\n                  type: actions.UPDATE_CURRENT_USER,\n                  payload: res.data,\n               });\n            })\n            .catch((error) => {\n               // handle error\n            });\n         this.props.history.push(\"/create-answer\");\n      }\n   }\n\n   render() {\n      // put the body of your function here\n      return (\n         <div className=\"col-12 col-lg-5\">\n            <div className=\"card\">\n               <div className=\"card-body text-dark\">\n                  <h2>Nice to meet you</h2>\n                  <p className=\"font-sans-serif mt-3\">\n                     Sign up for White Bear. Free Forever.\n                  </p>\n                  {this.state.isDisplayingInputs && (\n                     // we are saying we want the stuff below to display\n                     // when this state is true\n                     // it's initially set to false\n                     <div id=\"create-account-card\" className=\"\">\n                        <p className=\"text-blue font-sans-serif mt-2 mb-5\">\n                           Let's get you signed up.\n                        </p>\n                        <div className=\"form-group\">\n                           <label\n                              htmlFor=\"signup-email-input\"\n                              className=\"text-muted lead font-sans-serif\"\n                           >\n                              Email address\n                           </label>\n                           <input\n                              type=\"email\"\n                              className={classnames({\n                                 \"form-control\": true,\n                                 \"is-invalid\": this.state.hasEmailError, // is-invalid class will display when emailError state equals true\n                              })}\n                              id=\"signup-email-input\"\n                           />\n                           {this.state.hasEmailError && (\n                              // when the hasEmailError state is true\n                              // which means there is an error, display this:\n                              <p className=\"text-danger\" id=\"email-error\">\n                                 {this.state.emailError}\n                              </p>\n                           )}\n                        </div>\n                        <div className=\"form-group\">\n                           <label\n                              htmlFor=\"signup-password-input\"\n                              className=\"text-muted lead font-sans-serif\"\n                           >\n                              Create a password\n                           </label>\n                           <p className=\"text-muted mt-n2\">\n                              Must be at least 9 characters.\n                           </p>\n                           <input\n                              type=\"password\"\n                              className={classnames({\n                                 \"form-control\": true,\n                                 \"is-invalid\": this.state.hasPasswordError, // is-invalid class will display when emailError state equals true\n                              })}\n                              id=\"signup-password-input\"\n                           />\n                           {this.state.hasPasswordError && (\n                              <p className=\"text-danger\" id=\"password-error\">\n                                 {this.state.passwordError}\n                              </p>\n                           )}\n                        </div>\n\n                        <button\n                           to=\"/create-answer\"\n                           className=\"float-right btn btn-success btn-lg font-sans-serif\"\n                           style={{ width: \"100%\" }}\n                           id=\"lets-go\"\n                           onClick={() => {\n                              this.validateAndCreateUser();\n                           }}\n                        >\n                           Let's go!\n                        </button>\n                     </div>\n                  )}\n\n                  {!this.state.isDisplayingInputs && (\n                     // now we are telling it what to do when\n                     // the state of this object is set to false\n                     // by putting an exclamation point in front of it\n                     // we want the sign up button to show when the state is false\n                     <button\n                        className=\"btn btn-success btn-lg font-sans-serif mt-5\"\n                        style={{ width: \"100%\" }}\n                        id=\"sign-up-button\"\n                        onClick={() => {\n                           this.displayInputs();\n                           // when the button is clicked\n                           // and the state of isDislayingSignUpInputs changes to false\n                           // the sign up button disappears and the sign up card displays\n                        }}\n                     >\n                        Sign up\n                     </button>\n                  )}\n               </div>\n            </div>\n         </div>\n      );\n   }\n}\n\nfunction mapStateToProps(state) {\n   //global state\n   return {};\n}\nexport default withRouter(connect(mapStateToProps)(SignUp));\n"]},"metadata":{},"sourceType":"module"}