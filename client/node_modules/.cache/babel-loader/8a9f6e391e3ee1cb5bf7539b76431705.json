{"ast":null,"code":"var _jsxFileName = \"/Users/michellerohde/code/white-bear-fullstack/client/src/components/ui/SignUp.js\";\nimport React from \"react\"; // import { Link } from \"react-router-dom\";\n\nimport classnames from \"classnames\";\nimport hash from \"object-hash\";\nimport { v4 as getUuid } from \"uuid\";\nimport { withRouter } from \"react-router-dom\";\nimport { EMAIL_REGEX } from \"../../utils/helpers\";\nimport axios from \"axios\";\nimport actions from \"../../store/actions\";\nimport { connect } from \"react-redux\";\n\nclass SignUp extends React.Component {\n  // this function turned into a class will have a bunch of functions in it\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDisplayingInputs: false,\n      emailError: \"\",\n      passwordError: \"\",\n      hasEmailError: false,\n      hasPasswordError: false\n    };\n  }\n\n  displayInputs() {\n    this.setState({\n      isDisplayingInputs: true\n    });\n  }\n\n  async setEmailState(emailInput) {\n    const lowerCasedEmail = emailInput.toLowerCase(); // make their input lowercase\n\n    if (emailInput === \"\") {\n      // if the email input is blank,\n      this.setState({\n        emailError: \"Please enter your email address.\",\n        // display this error\n        hasEmailError: true // make the input box red with is-invalid class\n\n      });\n    } else if (!EMAIL_REGEX.test(lowerCasedEmail)) {\n      // if email does not follow regex format,\n      this.setState({\n        emailError: \"Please enter a valid email address.\",\n        //display this error\n        hasEmailError: true // make the input box red with is-invalid class\n\n      });\n    } else {\n      // otherwise, we don't want an email error (empty string) and we want to set hasEmailError to false to remove is-invalid class\n      this.setState({\n        emailError: \"\",\n        hasEmailError: false\n      });\n    }\n  }\n\n  checkHasLocalPart(passwordInput, emailInput) {\n    const localPart = emailInput.split(\"@\")[0]; // the split will give us an array of strings [\"local part\", \"part after @\"]; we want the part at index 0\n\n    if (localPart === \"\") return false;else if (localPart.length < 4) return false;else return passwordInput.includes(localPart); // if this is true, it returns true; if it's false, it returns false\n  }\n\n  async setPasswordState(passwordInput, emailInput) {\n    const uniqChars = [...new Set(passwordInput)]; // puts all unique characters into an array\n\n    if (passwordInput === \"\") {\n      this.setState({\n        passwordError: \"Please create a password.\",\n        // display this error\n        hasPasswordError: true // make the input box red with is-invalid class\n\n      });\n    } else if (passwordInput.length < 9) {\n      this.setState({\n        passwordError: \"Your password must be at least 9 characters.\",\n        // display this error\n        hasPasswordError: true // make the input box red with is-invalid class\n\n      });\n    } else if (this.checkHasLocalPart(passwordInput, emailInput)) {\n      this.setState({\n        passwordError: \"Your password cannot contain your email address.\",\n        // display this error\n        hasPasswordError: true // make the input box red with is-invalid class\n\n      });\n    } else if (uniqChars.length < 3) {\n      this.setState({\n        passwordError: \"Your password must contain at least 3 unique characters.\",\n        // display this error\n        hasPasswordError: true // make the input box red with is-invalid class\n\n      });\n    } else {\n      this.setState({\n        passwordError: \"\",\n        hasPasswordError: false\n      });\n    }\n  }\n\n  async validateAndCreateUser() {\n    const emailInput = document.getElementById(\"signup-email-input\").value; // get the user email input\n\n    await this.setEmailState(emailInput);\n    const passwordInput = document.getElementById(\"signup-password-input\").value;\n    await this.setPasswordState(passwordInput, emailInput);\n\n    if (this.state.hasEmailError === false && this.state.hasPasswordError === false) {\n      const user = {\n        id: getUuid(),\n        email: emailInput,\n        password: hash(passwordInput),\n        createdAt: Date.now()\n      };\n      console.log(user);\n      console.log(\"Created user object for POST: \", user); // mimics API response\n\n      axios // WE WANT THE API CALL TO HAPPEN AFTER THEY'VE BEEN VALIDATED\n      .get(\"https://raw.githubusercontent.com/2284049/white-bear-mpa/main/src/mock-data/user.json\").then(res => {\n        // handle success\n        const currentUser = res.data;\n        console.log(currentUser);\n        this.props.dispatch({\n          // HAD TO HAVE \"THIS\" FOR PROPS ERROR TO GO AWAY\n          type: actions.UPDATE_CURRENT_USER,\n          payload: res.data\n        });\n      }).catch(error => {// handle error\n      });\n      this.props.history.push(\"/create-answer\");\n    }\n  }\n\n  render() {\n    // put the body of your function here\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 col-lg-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-body text-dark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 19\n      }\n    }, \"Nice to meet you\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"font-sans-serif mt-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 19\n      }\n    }, \"Sign up for White Bear. Free Forever.\"), this.state.isDisplayingInputs &&\n    /*#__PURE__*/\n    // we are saying we want the stuff below to display\n    // when this state is true\n    // it's initially set to false\n    React.createElement(\"div\", {\n      id: \"create-account-card\",\n      className: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 22\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"text-blue font-sans-serif mt-2 mb-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 25\n      }\n    }, \"Let's get you signed up.\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"signup-email-input\",\n      className: \"text-muted lead font-sans-serif\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 28\n      }\n    }, \"Email address\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"email\",\n      className: classnames({\n        \"form-control\": true,\n        \"is-invalid\": this.state.hasEmailError // is-invalid class will display when emailError state equals true\n\n      }),\n      id: \"signup-email-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 28\n      }\n    }), this.state.hasEmailError &&\n    /*#__PURE__*/\n    // when the hasEmailError state is true\n    // which means there is an error, display this:\n    React.createElement(\"p\", {\n      className: \"text-danger\",\n      id: \"email-error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 31\n      }\n    }, this.state.emailError)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"signup-password-input\",\n      className: \"text-muted lead font-sans-serif\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 28\n      }\n    }, \"Create a password\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"text-muted mt-n2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 28\n      }\n    }, \"Must be at least 9 characters.\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"password\",\n      className: classnames({\n        \"form-control\": true,\n        \"is-invalid\": this.state.hasPasswordError // is-invalid class will display when emailError state equals true\n\n      }),\n      id: \"signup-password-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 28\n      }\n    }), this.state.hasPasswordError && /*#__PURE__*/React.createElement(\"p\", {\n      className: \"text-danger\",\n      id: \"password-error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 31\n      }\n    }, this.state.passwordError)), /*#__PURE__*/React.createElement(\"button\", {\n      to: \"/create-answer\",\n      className: \"float-right btn btn-success btn-lg font-sans-serif\",\n      style: {\n        width: \"100%\"\n      },\n      id: \"lets-go\",\n      onClick: () => {\n        this.validateAndCreateUser();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 25\n      }\n    }, \"Let's go!\")), !this.state.isDisplayingInputs &&\n    /*#__PURE__*/\n    // now we are telling it what to do when\n    // the state of this object is set to false\n    // by putting an exclamation point in front of it\n    // we want the sign up button to show when the state is false\n    React.createElement(\"button\", {\n      className: \"btn btn-success btn-lg font-sans-serif mt-5\",\n      style: {\n        width: \"100%\"\n      },\n      id: \"sign-up-button\",\n      onClick: () => {\n        this.displayInputs(); // when the button is clicked\n        // and the state of isDislayingSignUpInputs changes to false\n        // the sign up button disappears and the sign up card displays\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 22\n      }\n    }, \"Sign up\"))));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  //global state\n  return {};\n}\n\nexport default withRouter(connect(mapStateToProps)(SignUp));","map":{"version":3,"sources":["/Users/michellerohde/code/white-bear-fullstack/client/src/components/ui/SignUp.js"],"names":["React","classnames","hash","v4","getUuid","withRouter","EMAIL_REGEX","axios","actions","connect","SignUp","Component","constructor","props","state","isDisplayingInputs","emailError","passwordError","hasEmailError","hasPasswordError","displayInputs","setState","setEmailState","emailInput","lowerCasedEmail","toLowerCase","test","checkHasLocalPart","passwordInput","localPart","split","length","includes","setPasswordState","uniqChars","Set","validateAndCreateUser","document","getElementById","value","user","id","email","password","createdAt","Date","now","console","log","get","then","res","currentUser","data","dispatch","type","UPDATE_CURRENT_USER","payload","catch","error","history","push","render","width","mapStateToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\n// import { Link } from \"react-router-dom\";\nimport classnames from \"classnames\";\nimport hash from \"object-hash\";\nimport { v4 as getUuid } from \"uuid\";\nimport { withRouter } from \"react-router-dom\";\nimport { EMAIL_REGEX } from \"../../utils/helpers\";\nimport axios from \"axios\";\nimport actions from \"../../store/actions\";\nimport { connect } from \"react-redux\";\n\nclass SignUp extends React.Component {\n   // this function turned into a class will have a bunch of functions in it\n   constructor(props) {\n      super(props);\n      this.state = {\n         isDisplayingInputs: false,\n         emailError: \"\",\n         passwordError: \"\",\n         hasEmailError: false,\n         hasPasswordError: false,\n      };\n   }\n\n   displayInputs() {\n      this.setState({\n         isDisplayingInputs: true,\n      });\n   }\n\n   async setEmailState(emailInput) {\n      const lowerCasedEmail = emailInput.toLowerCase(); // make their input lowercase\n      if (emailInput === \"\") {\n         // if the email input is blank,\n         this.setState({\n            emailError: \"Please enter your email address.\", // display this error\n            hasEmailError: true, // make the input box red with is-invalid class\n         });\n      } else if (!EMAIL_REGEX.test(lowerCasedEmail)) {\n         // if email does not follow regex format,\n         this.setState({\n            emailError: \"Please enter a valid email address.\", //display this error\n            hasEmailError: true, // make the input box red with is-invalid class\n         });\n      } else {\n         // otherwise, we don't want an email error (empty string) and we want to set hasEmailError to false to remove is-invalid class\n         this.setState({ emailError: \"\", hasEmailError: false });\n      }\n   }\n\n   checkHasLocalPart(passwordInput, emailInput) {\n      const localPart = emailInput.split(\"@\")[0]; // the split will give us an array of strings [\"local part\", \"part after @\"]; we want the part at index 0\n      if (localPart === \"\") return false;\n      else if (localPart.length < 4) return false;\n      else return passwordInput.includes(localPart); // if this is true, it returns true; if it's false, it returns false\n   }\n\n   async setPasswordState(passwordInput, emailInput) {\n      const uniqChars = [...new Set(passwordInput)]; // puts all unique characters into an array\n      if (passwordInput === \"\") {\n         this.setState({\n            passwordError: \"Please create a password.\", // display this error\n            hasPasswordError: true, // make the input box red with is-invalid class\n         });\n      } else if (passwordInput.length < 9) {\n         this.setState({\n            passwordError: \"Your password must be at least 9 characters.\", // display this error\n            hasPasswordError: true, // make the input box red with is-invalid class\n         });\n      } else if (this.checkHasLocalPart(passwordInput, emailInput)) {\n         this.setState({\n            passwordError: \"Your password cannot contain your email address.\", // display this error\n            hasPasswordError: true, // make the input box red with is-invalid class\n         });\n      } else if (uniqChars.length < 3) {\n         this.setState({\n            passwordError:\n               \"Your password must contain at least 3 unique characters.\", // display this error\n            hasPasswordError: true, // make the input box red with is-invalid class\n         });\n      } else {\n         this.setState({ passwordError: \"\", hasPasswordError: false });\n      }\n   }\n\n   async validateAndCreateUser() {\n      const emailInput = document.getElementById(\"signup-email-input\").value; // get the user email input\n      await this.setEmailState(emailInput);\n      const passwordInput = document.getElementById(\"signup-password-input\")\n         .value;\n      await this.setPasswordState(passwordInput, emailInput);\n      if (\n         this.state.hasEmailError === false &&\n         this.state.hasPasswordError === false\n      ) {\n         const user = {\n            id: getUuid(),\n            email: emailInput,\n            password: hash(passwordInput),\n            createdAt: Date.now(),\n         };\n         console.log(user);\n         console.log(\"Created user object for POST: \", user); // mimics API response\n         axios // WE WANT THE API CALL TO HAPPEN AFTER THEY'VE BEEN VALIDATED\n            .get(\n               \"https://raw.githubusercontent.com/2284049/white-bear-mpa/main/src/mock-data/user.json\"\n            )\n            .then((res) => {\n               // handle success\n               const currentUser = res.data;\n               console.log(currentUser);\n               this.props.dispatch({\n                  // HAD TO HAVE \"THIS\" FOR PROPS ERROR TO GO AWAY\n                  type: actions.UPDATE_CURRENT_USER,\n                  payload: res.data,\n               });\n            })\n            .catch((error) => {\n               // handle error\n            });\n         this.props.history.push(\"/create-answer\");\n      }\n   }\n\n   render() {\n      // put the body of your function here\n      return (\n         <div className=\"col-12 col-lg-5\">\n            <div className=\"card\">\n               <div className=\"card-body text-dark\">\n                  <h2>Nice to meet you</h2>\n                  <p className=\"font-sans-serif mt-3\">\n                     Sign up for White Bear. Free Forever.\n                  </p>\n                  {this.state.isDisplayingInputs && (\n                     // we are saying we want the stuff below to display\n                     // when this state is true\n                     // it's initially set to false\n                     <div id=\"create-account-card\" className=\"\">\n                        <p className=\"text-blue font-sans-serif mt-2 mb-5\">\n                           Let's get you signed up.\n                        </p>\n                        <div className=\"form-group\">\n                           <label\n                              htmlFor=\"signup-email-input\"\n                              className=\"text-muted lead font-sans-serif\"\n                           >\n                              Email address\n                           </label>\n                           <input\n                              type=\"email\"\n                              className={classnames({\n                                 \"form-control\": true,\n                                 \"is-invalid\": this.state.hasEmailError, // is-invalid class will display when emailError state equals true\n                              })}\n                              id=\"signup-email-input\"\n                           />\n                           {this.state.hasEmailError && (\n                              // when the hasEmailError state is true\n                              // which means there is an error, display this:\n                              <p className=\"text-danger\" id=\"email-error\">\n                                 {this.state.emailError}\n                              </p>\n                           )}\n                        </div>\n                        <div className=\"form-group\">\n                           <label\n                              htmlFor=\"signup-password-input\"\n                              className=\"text-muted lead font-sans-serif\"\n                           >\n                              Create a password\n                           </label>\n                           <p className=\"text-muted mt-n2\">\n                              Must be at least 9 characters.\n                           </p>\n                           <input\n                              type=\"password\"\n                              className={classnames({\n                                 \"form-control\": true,\n                                 \"is-invalid\": this.state.hasPasswordError, // is-invalid class will display when emailError state equals true\n                              })}\n                              id=\"signup-password-input\"\n                           />\n                           {this.state.hasPasswordError && (\n                              <p className=\"text-danger\" id=\"password-error\">\n                                 {this.state.passwordError}\n                              </p>\n                           )}\n                        </div>\n\n                        <button\n                           to=\"/create-answer\"\n                           className=\"float-right btn btn-success btn-lg font-sans-serif\"\n                           style={{ width: \"100%\" }}\n                           id=\"lets-go\"\n                           onClick={() => {\n                              this.validateAndCreateUser();\n                           }}\n                        >\n                           Let's go!\n                        </button>\n                     </div>\n                  )}\n\n                  {!this.state.isDisplayingInputs && (\n                     // now we are telling it what to do when\n                     // the state of this object is set to false\n                     // by putting an exclamation point in front of it\n                     // we want the sign up button to show when the state is false\n                     <button\n                        className=\"btn btn-success btn-lg font-sans-serif mt-5\"\n                        style={{ width: \"100%\" }}\n                        id=\"sign-up-button\"\n                        onClick={() => {\n                           this.displayInputs();\n                           // when the button is clicked\n                           // and the state of isDislayingSignUpInputs changes to false\n                           // the sign up button disappears and the sign up card displays\n                        }}\n                     >\n                        Sign up\n                     </button>\n                  )}\n               </div>\n            </div>\n         </div>\n      );\n   }\n}\n\nfunction mapStateToProps(state) {\n   //global state\n   return {};\n}\nexport default withRouter(connect(mapStateToProps)(SignUp));\n"]},"metadata":{},"sourceType":"module"}